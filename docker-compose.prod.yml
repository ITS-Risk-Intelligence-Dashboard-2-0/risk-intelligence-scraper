services:
  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
  
  django-migrations:
    build: ./web_scraper
    command: >
      bash -c "
        echo 'DB is ready. Running Django migrations for Celery Beat...'
        python manage.py migrate
      "
    volumes:
      - ./web_scraper:/app
      - ./shared/core_lib:/app/shared/core_lib
    env_file:
      - ./.env
    environment:
      - DJANGO_SETTINGS_MODULE=web_scraper_project.settings
    depends_on:
      postgres:
        condition: service_healthy

  browser:
    build:
      context: ./browser
      dockerfile: Dockerfile
    container_name: chromium-headless
    logging:
      driver: "none"
    ports:
      - "9222:9222"

  # --- BACKGROUND SERVICES ---
  celery_worker:
    build: ./web_scraper
    command: celery -A web_scraper_project worker -l info
    volumes:
      - ./web_scraper:/app
      - ./shared/core_lib:/app/shared/core_lib
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      django-migrations:
        condition: service_completed_successfully
    restart: always

  celery_beat:
    build: ./web_scraper
    command: celery -A web_scraper_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --loglevel=INFO
    volumes:
      - ./web_scraper:/app
      - ./shared/core_lib:/app/shared/core_lib
    env_file:
      - ./.env
    environment:
      - DJANGO_SETTINGS_MODULE=web_scraper_project.settings
      - CELERY_BEAT_SCHEDULER=django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      django-migrations:
        condition: service_completed_successfully
    restart: always

  # --- APPLICATION SERVICES ---
  schedule-api:
    build: ./backend
    command: >
      bash -c "python manage.py collectstatic --noinput &&
               gunicorn core.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
      - ./web_scraper:/app/web_scraper
      - ./scripts:/app/scripts
      - static_volume:/app/static
    env_file:
      - ./.env
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - PYTHONPATH=/app 
    depends_on:
      postgres:
        condition: service_healthy
      django-migrations:
        condition: service_completed_successfully
    restart: always

  streamlit-ui:
    build: ./frontend
    volumes:
      - ./frontend:/app
    environment:
      - API_URL=http://schedule-api:8000/api
    depends_on:
      schedule-api:
        condition: service_started
    restart: always

  # --- PUBIC FACING SERVICES ---
  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
      # for setup only, remove after initial setup
      # - ./nginx/nginx-temp.conf:/etc/nginx/conf.d/nginx.conf  # Add this line temporarily

    depends_on:
      schedule-api:
        condition: service_started
      streamlit-ui:
        condition: service_started
    restart: always

  certbot:
    image: certbot/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email snkris@umich.edu --agree-tos --no-eff-email -d riskintel.miserver.it.umich.edu #TODO: USE GROUP OR LORRAINE EMAIL
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot

volumes:
  postgres_data:
  static_volume:
  certbot_certs:
  certbot_webroot: