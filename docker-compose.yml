services:
  client:
    build: ./frontend
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app

  server:
    build: ./backend
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - postgres

  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  # alembic-migrations:
  #   build: ./web_scraper
  #   command: >
  #     bash -c "
  #       echo 'DB is ready. Running Alembic migrations...'
  #       alembic -c shared/alembic.ini upgrade head
  #     "
  #   volumes:
  #     - ./backend:/app
  #     - ./shared:/app/shared
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  # django-migrations:
  #   build: ./web_scraper
  #   command: >
  #     bash -c "
  #       echo 'DB is ready. Running Django migrations for Celery Beat...'
  #       python manage.py migrate
  #     "
  #   volumes:
  #     - ./web_scraper:/app
  #     - ./shared/core_lib:/app/core_lib
  #   env_file:
  #     - ./.env
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=web_scraper_project.settings
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  # celery_worker:
  #   build: ./web_scraper
  #   command: celery -A web_scraper_project worker -l info
  #   volumes:
  #     - ./web_scraper:/app
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #     django-migrations:
  #       condition: service_completed_successfully
  #     alembic-migrations:
  #       condition: service_completed_successfully

  # celery_beat:
  #   build: ./web_scraper
  #   command: celery -A web_scraper_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --loglevel=INFO
  #   volumes:
  #     - ./web_scraper:/app
  #   env_file:
  #     - ./.env
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=web_scraper_project.settings
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #     django-migrations:
  #       condition: service_completed_successfully
  #     alembic-migrations:
  #       condition: service_completed_successfully

  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_data: